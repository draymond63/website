{"version":3,"sources":["webpack:///./src/views/CareerPage.vue?2710","webpack:///src/views/CareerPage.vue","webpack:///./src/views/CareerPage.vue?8ef7","webpack:///./src/views/CareerPage.vue","webpack:///./src/views/CareerPage.vue?7355"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_m","_v","attrs","on","$event","$emit","_e","staticRenderFns","name","props","is_mobile","Boolean","component"],"mappings":"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","file":"js/chunk-2d185a50.1b981f95.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"cr-main\"},[_c('div',[_vm._m(0),_c('p',[_vm._v(\"For a full overview of the code click \"),_c('a',{attrs:{\"href\":\"https://github.com/draymond63/passion\"},on:{\"click\":function($event){return _vm.$emit('ga-event', 'Careers', 'Viewed')}}},[_vm._v(\"here\")]),_vm._v(\". \")]),_c('h3',[_vm._v(\"The Mapping\")]),_vm._m(1),(_vm.is_mobile)?_c('h3',[_vm._v(\"The Heirarchy\")]):_vm._e(),(_vm.is_mobile)?_c('p',[_vm._v(\" One arbitrary constant is how aggresive we are when clustering the points together to form our groups. We could cluster the 600 jobs into 10, 30, or 300 groups: it all depends on the programmer's choice. The tree below shows different levels of this. This top level, with items such as \\\"developer\\\" and \\\"therapy,\\\" were clustered really aggresively resulting in fewer top level groups.\"),_c('br'),_c('br'),_vm._v(\" The way to view this tree is that the smaller groups are \"),_c('a',[_vm._v(\"sub-categories\")]),_vm._v(\" of the parent, with the final boxes being the actual jobs. \")]):_vm._e()]),(_vm.is_mobile)?_c('p',[_vm._v(\" Click \"),_c('a',{attrs:{\"href\":\"2D_career_plot.html\"}},[_vm._v(\"here\")]),_vm._v(\" to see the career's plotted in 2D. \"),_c('br'),_vm._v(\"Click \"),_c('a',{attrs:{\"href\":\"career_grouping_tree.html\"}},[_vm._v(\"here\")]),_vm._v(\" to see the career tree. \")]):_c('div',[_c('p',[_vm._v(\"Feel free to click around and see what happens!\")]),_c('iframe',{attrs:{\"src\":\"2D_career_plot.html\"}}),_c('br'),_c('br'),_c('h3',[_vm._v(\"The Heirarchy\")]),_vm._m(2),_c('iframe',{attrs:{\"src\":\"career_grouping_tree.html\"}})])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{attrs:{\"id\":\"header\"}},[_c('h1',[_vm._v(\"Careers Mapped\")]),_c('h2',[_vm._v(\"Visualizing careers to help people find their passion\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" LinkedIn contains millions of accounts, each with containing previous work experience. A small section of this data is publicly available on Kaggle. To start mapping the careers into useful coordinate, the data must first be cleaned; commmon \"),_c('a',[_vm._v(\"NLP\")]),_vm._v(\" tasks like \"),_c('a',{attrs:{\"href\":\"https://www.datacamp.com/community/tutorials/stemming-lemmatization-python\"}},[_vm._v(\"lemmatization\")]),_vm._v(\" and replacing acronyms.\"),_c('br'),_c('br'),_vm._v(\" Since there are many different ways to write a similar title (e.g. \\\"senior software engineer\\\" vs \\\"software engineer\\\") the job entries are clustered by the words in them. Using \"),_c('a',[_vm._v(\"TFIDF\")]),_vm._v(\", or \\\"term frequency-inverse document frequency,\\\" the jobs are clustered from 1600 titles to 600. Now that the jobs are partially standardized, they can be grouped using the LinkedIn data.\"),_c('br'),_c('br'),_vm._v(\" A square matrix is made where each row and column represents one of the 600 jobs, where each coordinate contains the numbers of people that have both of those jobs. So, every item in the diagonal represents the number of people that have that one job. This essentially is our map (placing the 600 jobs into a 600-D space) but to reduce the affect of variablity, such as how often the job appears, the matrix is standardized using a technique called pmi, or \\\"\"),_c('a',{attrs:{\"href\":\"https://en.wikipedia.org/wiki/Pointwise_mutual_information\"}},[_vm._v(\"pointwise mutual information\")]),_vm._v(\"\\\".\"),_c('br'),_c('br'),_vm._v(\" Now, techincally, we have a map of our careers! However, it is in \"),_c('a',[_vm._v(\"600 dimensions\")]),_vm._v(\" :(. But! There are techinques to reduce the dimensionality of mappings while trying to retain as much information as possible. This is how we are visualizing the data on a 2D screen! Although, it has the consequence of making the new axes meaningless. But don't worry, we don't care for what the coordinates of something are, but how close they are in relation to others. The groups are made by clustering together close points in the higher dimensional space and then displaying them on the graph. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" One arbitrary constant is how aggresive we are when clustering the points together to form our groups. We could cluster the 600 jobs into 10, 30, or 300 groups: it all depends on the programmer's choice. The tree below shows different levels of this. This top level, with items such as \\\"developer\\\" and \\\"therapy,\\\" were clustered really aggresively resulting in fewer top level groups.\"),_c('br'),_c('br'),_vm._v(\" The way to view this tree is that the smaller groups are \"),_c('a',[_vm._v(\"sub-categories\")]),_vm._v(\" of the parent, with the final boxes being the actual jobs. \")])}]\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"cr-main\">\r\n    <!-- First Column -->\r\n    <div>\r\n      <span id=\"header\">\r\n        <h1>Careers Mapped</h1>\r\n        <h2>Visualizing careers to help people find their passion</h2>\r\n      </span>\r\n      <p>For a full overview of the code click \r\n        <a href=\"https://github.com/draymond63/passion\" @click=\"$emit('ga-event', 'Careers', 'Viewed')\">here</a>.\r\n      </p>\r\n      <h3>The Mapping</h3>\r\n      <p>\r\n        LinkedIn contains millions of accounts, each with containing previous work experience.\r\n        A small section of this data is publicly available on Kaggle. To start mapping the\r\n        careers into useful coordinate, the data must first be cleaned; commmon <a>NLP</a> tasks like\r\n        <a href=\"https://www.datacamp.com/community/tutorials/stemming-lemmatization-python\">lemmatization</a>\r\n        and replacing acronyms.<br><br>\r\n        Since there are many different ways to write a similar title (e.g. \"senior software engineer\" vs \r\n        \"software engineer\") the job entries are clustered by the words in them. Using <a>TFIDF</a>, or \"term frequency-inverse document frequency,\"\r\n        the jobs are clustered from 1600 titles to 600. Now that the jobs are partially standardized, they can be grouped\r\n        using the LinkedIn data.<br><br>\r\n        A square matrix is made where each row and column represents one of the 600 jobs, where each coordinate contains the numbers of people that\r\n        have both of those jobs. So, every item in the diagonal represents the number of people that have that one job. This essentially is our map\r\n        (placing the 600 jobs into a 600-D space) but to reduce the affect of variablity, such as how often the job appears, the matrix is standardized\r\n        using a technique called pmi, or \"<a href=\"https://en.wikipedia.org/wiki/Pointwise_mutual_information\">pointwise mutual information</a>\".<br><br>\r\n        Now, techincally, we have a map of our careers! However, it is in <a>600 dimensions</a> :(. But! There are techinques to reduce the dimensionality\r\n        of mappings while trying to retain as much information as possible. This is how we are visualizing the data on a 2D screen! Although, it has the\r\n        consequence of making the new axes meaningless. But don't worry, we don't care for what the coordinates of something are, but how close they are in \r\n        relation to others. The groups are made by clustering together close points in the higher dimensional space and then displaying them on the graph.\r\n      </p>\r\n\r\n      <!-- DUPLICATION FOR MOBILE -->\r\n      <h3 v-if=\"is_mobile\">The Heirarchy</h3>\r\n      <p v-if=\"is_mobile\">\r\n        One arbitrary constant is how aggresive we are when clustering the points together to form our groups. We could cluster the 600 jobs into 10, 30, or 300 groups:\r\n        it all depends on the programmer's choice. The tree below shows different levels of this. This top level, with items such as \"developer\" and \"therapy,\" \r\n        were clustered really aggresively resulting in fewer top level groups.<br><br>\r\n        The way to view this tree is that the smaller groups are <a>sub-categories</a> of the parent, with the final boxes being the actual jobs.\r\n      </p>\r\n    </div>\r\n    <!-- Second Column -->\r\n    <p v-if=\"is_mobile\">\r\n      Click <a href=\"2D_career_plot.html\">here</a> to see the career's plotted in 2D.\r\n      <br>Click <a href=\"career_grouping_tree.html\">here</a> to see the career tree.\r\n    </p>\r\n    <div v-else>\r\n      <p>Feel free to click around and see what happens!</p>\r\n      <iframe src=\"2D_career_plot.html\"/>\r\n      <br><br>\r\n      <h3>The Heirarchy</h3>\r\n      <p>\r\n        One arbitrary constant is how aggresive we are when clustering the points together to form our groups. We could cluster the 600 jobs into 10, 30, or 300 groups:\r\n        it all depends on the programmer's choice. The tree below shows different levels of this. This top level, with items such as \"developer\" and \"therapy,\" \r\n        were clustered really aggresively resulting in fewer top level groups.<br><br>\r\n        The way to view this tree is that the smaller groups are <a>sub-categories</a> of the parent, with the final boxes being the actual jobs.\r\n      </p>\r\n      <iframe src=\"career_grouping_tree.html\"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'CareerPage',\r\n  props: {\r\n    is_mobile: Boolean\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.cr-main {\r\n  padding: 5%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\niframe {\r\n  height: 100vh;\r\n  width: 100%;\r\n  border: none;\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CareerPage.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CareerPage.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CareerPage.vue?vue&type=template&id=8e300096&scoped=true&\"\nimport script from \"./CareerPage.vue?vue&type=script&lang=js&\"\nexport * from \"./CareerPage.vue?vue&type=script&lang=js&\"\nimport style0 from \"./CareerPage.vue?vue&type=style&index=0&id=8e300096&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"8e300096\",\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CareerPage.vue?vue&type=style&index=0&id=8e300096&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CareerPage.vue?vue&type=style&index=0&id=8e300096&scoped=true&lang=css&\""],"sourceRoot":""}