(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-5a1d394a"],{"5d90":function(e,t,i){e.exports=i.p+"img/Andro.fcb3acf3.svg"},"6c31":function(e,t,i){},bb42:function(e,t,i){"use strict";i.r(t);var a=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{class:{"main-mobile":this.is_mobile},attrs:{id:"main"}},[e._m(0),a("img",{attrs:{src:i("5d90"),alt:"Block Diagram didn't load"}})])},r=[function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",[i("span",{attrs:{id:"header"}},[i("h1",{staticStyle:{"margin-right":"5%"}},[e._v("Andro")]),i("h2",[e._v("A binarized neural network breadboard processor")])]),i("h3",[e._v("The Goal")]),i("p",[e._v(" The final product will be a breadboard prototype of a circuit that could store the weights of a fully "),i("a",[e._v("binarized dense layer sequential neural network")]),e._v(" and apply the matrix multiplication correctly to produce a set of logits that could determine the final result. An addition circuit is attached to cycle through the logits to find the index of the EEPROM with the highest logits. ")]),i("h3",[e._v("The Software")]),i("p",[e._v(" An example model was made with Keras and Larq to use the mnist dataset with 1-bit weights. There are multiple iterations of this NN, slowly deconstructing it from Keras to "),i("a",[e._v("Numpy")]),e._v(" to using bitwise operators. The final iteration is a custom hardware "),i("a",[e._v("simulation")]),e._v(" to emulate the design of the real circuit. ")]),i("h3",[e._v("The Hardware")]),i("p",[e._v(" I have finished the software side of this project (including the simulation) and have just recently ordered parts. In the end the circuit will be able to take most shapes of neural network, including multiple hidden layers! ")])])}],o={name:"AndroPage",props:{is_mobile:Boolean}},n=o,s=(i("e543"),i("2877")),l=Object(s["a"])(n,a,r,!1,null,"62cb9fbc",null);t["default"]=l.exports},e543:function(e,t,i){"use strict";var a=i("6c31"),r=i.n(a);r.a}}]);
//# sourceMappingURL=chunk-5a1d394a.0e30cedc.js.map